
<%-include("../../views/partials/admin/header")%>

<h2>Category Management</h2>


<form class="user-search-form"   action="/admin/categories" method="GET">
    <input type="text" name="search" value="<%= searchQuery %>" placeholder="Search categories">
    <button type="submit">Search</button>
    <% if (searchQuery) { %>
        <a href="/admin/categories"><button type="button">Reset</button></a>
    <% } %>
</form>
<% if (message) { %>
    <p class="alert alert-warning"><%= message %></p>
<% } %>

<div class="table-responsive-wrapper">
<table class="book-table">
    <thead>
        <tr>
            <th>No</th>
            <th>Name</th>
            <th>Status</th>
            <th class="text-center">Actions</th>
        </tr>
    </thead>
    <tbody>
        <% categories.forEach((category, index) => { %>
            <tr>
                <td><%= (currentPage - 1) * 5 + index + 1 %></td>
                <td id="cat-name-<%= category._id %>"><%= category.name %></td>
                <td>
                    <%= category.isListed ? "Active" : "Inactive" %>
                </td>
                <td>
                    <div class="action-buttons">
                    <button class="edit-btn"   onclick="editCategory('<%= category._id %>', '<%= category.name %>')">Edit</button>
                    <button class="delete-btn" onclick="softDeleteCategory('<%= category._id %>')">Delete</button>
                    <button class="delete-btn" onclick="toggleCategory('<%= category._id %>')">
                        <%= category.isListed ? "Deactivate" : "Activate" %>
                    </button>
                </div>
                </td>
            </tr>
        <% }) %>
    </tbody>
</table>
</div>


<form class="user-search-form" action="/admin/categories" method="POST" onsubmit="return validateCategoryForm()">
    <input type="text" id="category"  name="name" required placeholder="Category Name">
    <span id="error-message" style="color: red;"></span><br>
    <button type="submit">Add Category</button>
</form>

<div class="pagination-container">
    <% for(let i = 1; i <= totalPages; i++) { %>
        <a href="/admin/categories?page=<%= i %>&search=<%= searchQuery %>">
            <button <%= currentPage === i ? 'disabled' : '' %>><%= i %></button>
        </a>
    <% } %>
</div>
</main>

</div>
</div>


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script>
    async function editCategory(id, name) {
    const result = await Swal.fire({
        title: "Edit Category",
        input: "text",
        inputValue: name,
        showCancelButton: true,
        confirmButtonText: "Save",
        inputValidator: (value) => {
            if (!value.trim()) {
                return "Category name cannot be empty.";
            }
            if (value.trim().length < 3) {
                return "Category name must be at least 3 characters.";
            }
            return null; 
        }
    });

    if (result.isConfirmed) {
        try {
            const updatedName = result.value.trim();
            const response = await fetch(`/admin/categories/edit/${id}`, {
                method: "PATCH",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ name: updatedName})
            });
           
           let data;
            try {
                data = await response.json(); 
            } catch (jsonErr) {
                console.error("Error parsing JSON response:", jsonErr);
                return Swal.fire("Error!", "Invalid response from server", "error");
            }

            console.log("Status:", response.status);
            console.log("Response Data:", data);

            if (response.ok) {
                document.getElementById(`cat-name-${id}`).textContent = updatedName;
                await Swal.fire("Success",data.message,"success")
            
            } else {
                await Swal.fire("Error!",data.message||"failed to update category");
            }
        } catch (error) {
            console.error("Fetch error:", error);
            console.error("Error updating category:", error);
            await Swal.fire("Error!", "Something went wrong.", "error");
        }
    }
}
async function toggleCategory(id) {
    const result = await Swal.fire({
        title: "Are you sure?",
        text: "This will change the category status.",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#d33",
        cancelButtonColor: "#3085d6",
        confirmButtonText: "Yes, update!",
        cancelButtonText: "Cancel"
    });

    if (result.isConfirmed) {
        try {
            const response = await fetch(`/admin/categories/toggle/${id}`, { method: "PATCH" });

            if (response.ok) {
                location.reload();
            } else {
                await Swal.fire("Error!", "Failed to update category status.", "error");
            }
        } catch (error) {
            console.error("Error toggling category:", error);
            await Swal.fire("Error!", "Something went wrong.", "error");
        }
    }
}


async function softDeleteCategory(id) {
    const result = await Swal.fire({
        title: "Are you sure?",
        text: "This will remove the category from the panel.",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#d33",
        cancelButtonColor: "#3085d6",
        confirmButtonText: "Yes, delete!",
        cancelButtonText: "Cancel"
    });

    if (result.isConfirmed) {
        try {
            const response = await fetch(`/admin/categories/delete/${id}`, { method: "PATCH" });

            if (response.ok) {
                location.reload();
            } else {
                await Swal.fire("Error!", "Failed to update category status.", "error");
            }
        } catch (error) {
            console.error("Error toggling category:", error);
            await Swal.fire("Error!", "Something went wrong.", "error");
        }
    }
}

function validateCategoryForm() {
    const categoryInput = document.getElementById("category");
    const errorMessage = document.getElementById("error-message");

    if (categoryInput.value.trim() === "") {
        errorMessage.textContent = "Category name cannot be empty.";
        return false;
    } else if (categoryInput.value.length < 3) {
        errorMessage.textContent = "Category name must be at least 3 characters.";
        return false;
    }

    errorMessage.textContent = "";
    return true;
}

</script>
